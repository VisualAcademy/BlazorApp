@using System.Timers
@implements IDisposable

<div class="search">
    <i class="oi oi-eye"></i>
    <input placeholder="Search..."
           @attributes="AdditionalAttributes" @bind="SearchQuery" @bind:event="oninput" />
    <input type="button" value="Search" @onclick="Search" />
</div>
<hr />
자식: @SearchQuery

@code {
    private string searchQuery; // 검색어 담을 그릇
    private Timer debounceTimer; // 디바운스 타임: 응답 대기 시간(300밀리초)

    public string SearchQuery
    {
        get => searchQuery;
        set
        {
            searchQuery = value;

            // 타이머 가동
            debounceTimer.Stop(); debounceTimer.Start();
        }
    }

    // 부모에서 전달된 기타 특성들을 모두 받아서 사용
    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalAttributes { get; set; }

    // 자식 컴포넌트에서 발생한 정보를 부모 컴포넌트에게 전달
    [Parameter]
    public EventCallback<string> SearchQueryChanged { get; set; }

    [Parameter]
    public int Debounce { get; set; } = 300;

    protected override void OnInitialized()
    {
        debounceTimer = new Timer();
        debounceTimer.Interval = Debounce;
        debounceTimer.AutoReset = false;
        debounceTimer.Elapsed += SearchHandler;
    }

    /// <summary>
    /// 검색 버튼 클릭했을 때 실행
    /// </summary>
    protected void Search()
    {
        SearchQueryChanged.InvokeAsync(SearchQuery); // 부모의 메서드에 검색어 전달
    }

    /// <summary>
    /// 타이머에 의해서 실행
    /// </summary>
    protected async void SearchHandler(object source, ElapsedEventArgs e)
    {
        await InvokeAsync(() => SearchQueryChanged.InvokeAsync(SearchQuery)); // 부모의 메서드에 검색어 전달
    }

    public void Dispose()
    {
        debounceTimer.Dispose(); // 타이머 개체 소멸 
    }
}
